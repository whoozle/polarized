#!/usr/bin/env python

from polarized.palette import Palette, ColorPicker, XTERM
from polarized.image import Image
from polarized.unicode import BLOCKS
import sys
import png
import argparse

parser = argparse.ArgumentParser(description='Read PNG file and display it in your terminal')
parser.add_argument('input', help='input PNG file')

args = parser.parse_args()
reader = png.Reader(args.input)
w, h, pixels, info = reader.asRGBA8()
planes = info['planes']

#pal = Palette(16)
print "building blocks..."
image = Image(w, h)
y = 0
for row in pixels:
	offset = 0
	for x in xrange(0, w):
		rgb = tuple(row[offset: offset + 3])
		image.set(y, x, rgb)
		offset += 4
	y += 1

print "splitting %d blocks..." %(len(image.blocks))

def escape(cmd):
	return "\x1b[%dm" %cmd

def escapeBg(cmd):
	return escape((cmd & 7) + 40) + escape(1 if cmd & 8 else 2)

def escapeFg(cmd):
	return escape((cmd & 7) + 30)

def print_line(line):
	out = ""
	for char, bg, fg in line:
		out += escapeBg(bg) + escapeFg(fg) + char
	out += escape(0)
	out += "\n"
	sys.stdout.write(out)

picker = ColorPicker(XTERM)
line = []
for block in image.blocks:
	binaryBlock = block.split(picker)
	char = None
	charRMS = None
	for blockChar, blockData in BLOCKS:
		rms = binaryBlock.rms(blockData)
		if char is None or rms < charRMS:
			char = blockChar
			charRMS = rms
	line.append((char, binaryBlock.color1[0], binaryBlock.color2[0]))
	if len(line) == image.bw:
		print_line(line)
		line = []
