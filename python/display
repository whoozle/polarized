#!/usr/bin/env python

from polarized.palette import Palette, ColorPicker, XTERM
from polarized.image import Image
from polarized.unicode import BLOCKS
import png
import argparse

parser = argparse.ArgumentParser(description='Read PNG file and display it in your terminal')
parser.add_argument('input', help='input PNG file')

args = parser.parse_args()
reader = png.Reader(args.input)
w, h, pixels, info = reader.asRGB()
planes = info['planes']

#pal = Palette(16)
#print "building blocks..."
image = Image(w, h)
y = 0
for row in pixels:
	offset = 0
	for x in xrange(0, w):
		rgb = tuple(row[offset: offset + 3])
		image.set(y, x, rgb)
		offset += 3
	y += 1

import curses

def main(stdscr):
	curses.start_color()
	curses.use_default_colors()
	for c1 in range(0, curses.COLORS):
		for c2 in range(0, curses.COLORS):
			curses.init_pair((c1 << 4) | c2, c2, c1)
	try:
		#print "splitting %d blocks..." %(len(image.blocks))
		picker = ColorPicker(XTERM)
		line = []
		y = 0
		for block in image.blocks:
			binaryBlock = block.split(picker)
			char = None
			charRMS = None
			for blockChar, blockData in BLOCKS:
				rms = binaryBlock.rms(blockData)
				if char is None or rms < charRMS:
					char = blockChar
					charRMS = rms
			line.append((char, binaryBlock.color1[0], binaryBlock.color2[0]))
			if len(line) == image.bw:
				x = 0
				for char, c1, c2 in line:
					stdscr.addstr(y, x, ' ', curses.color_pair((c1 << 4) | c2))
					x += 1
				y += 1
				stdscr.refresh()
				line = []
	except curses.ERR:
		# End of screen reached
		pass
	stdscr.getch()

curses.wrapper(main)
