_blocks = (
	(' ',	   (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)),

	(u'\u2580', (0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00)),
	(u'\u2581', (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff)),
	(u'\u2582', (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff)),
	(u'\u2583', (0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff)),
	(u'\u2584', (0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff)),
	(u'\u2585', (0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff)),
	(u'\u2586', (0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff)),
	(u'\u2587', (0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff)),
	(u'\u2588', (0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff)),
	(u'\u2589', (0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe)),
	(u'\u258a', (0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc)),
	(u'\u258b', (0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8)),
	(u'\u258c', (0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0)),
	(u'\u258d', (0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0)),
	(u'\u258e', (0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0)),
	(u'\u258f', (0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80)),

	(u'\u2590', (0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f)),
	(u'\u2591', (0x88, 0x11, 0x22, 0x44, 0x88, 0x11, 0x22, 0x44)),
	(u'\u2592', (0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55)),
	(u'\u2593', (0x77, 0xee, 0xdd, 0xbb, 0x77, 0xee, 0xdd, 0xbb)),
	(u'\u2594', (0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)),
	(u'\u2595', (0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01)),

	(u'\u2596', (0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0)),
	(u'\u2597', (0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f)),
	(u'\u2598', (0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00)),
	(u'\u2599', (0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff)),
	(u'\u259a', (0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f)),
	(u'\u259b', (0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0)),
	(u'\u259c', (0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f)),
	(u'\u259d', (0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00)),
	(u'\u259e', (0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0)),
	(u'\u259f', (0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff)),
)

def _translate(data):
	blockData = []
	for bits in data:
		for i in xrange(0, 8):
			blockData.append(1 if (bits & (0x80 >> i)) else 0)
	return blockData

BLOCKS = [(char, _translate(block)) for char, block in _blocks]
